<!doctype html>
<style>
    .axis {
        font-family: sans-serif;
        font-size: 26px;
        font-family: 'Source Code Pro for Powerline';
        font-weight: bold;
    }
    .yaxis {
        fill: #9E0000;
            stroke-width: 2px;
    }
    .y2axis {
        fill: #00B2EE;
            stroke-width: 2px;
    }
    .yaxis.ticks {
        fill: #ce6767;
    }
    .y2axis.ticks {
        fill: #7cceea;
    }
    .xaxis {
        stroke-width: 2px;
    }
    .line {
        fill: none;
        stroke: #f1c40f;
        stroke-width: 3px;
    }
    .smoothline {
        fill: none;
        //stroke: #d466ee;
        stroke-width: 3px;
    }
    .area {
        fill: #e74c3c;
        opacity: 0.5;
    }
    .circle {
        stroke: #e74c3c;
        stroke-width: 3px;
        fill: #FFF;
    }
    .grid {
        stroke: #EEE;
        stroke-width: 1px;
        fill: none;
    }
    .dark-grid {
        stroke: #000;
        stroke-width: 2px;
        fill: none;
    }
</style>
<script src="http://d3js.org/d3.v4.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.1/socket.io.js"></script>
<html>
    <head>
        <title>$NAME$</title>
    </head>
    <body>
        <div>
            <video id="videoPlayer" controls="true" width="1080" height="720" muted></video>
        </div>
        <div style="">
            <svg id="y1axis" width="100" style="position:absolute;left:10;"></svg>
            <svg id="chart" style="position:absolute;left:110;"></svg>
            <svg id="y2axis" style="position:absolute;left:1264;"></svg>
        </div>
	<script src="/dash.all.min.js"></script>
    <script>
        var player = null;
        (function(){
    		var url = '/videos/$NAME$/Manifest.mpd';
            player = dashjs.MediaPlayer().create()

            // generate clientID or retain one from earlier
            if (localStorage.getItem("clientId") == null) {
                localStorage.setItem("clientId", Math.round(Math.random() * 1000000));
            }
            var clientId = localStorage.getItem("clientId");

            var abr_algorithms = {0: 'Default', 1: 'Fixed Rate (0)', 2: 'Buffer Based', 3: 'Rate Based', 4: 'MPC', 5: 'Festive', 6: 'Bola'};
            var abr_id = 4;

            if ( abr_id > 1 && abr_id != 6 ) {
                player.enablerlABR(true);
            }

            // uncomment this block if you want to change the buffer size that dash tries to maintain
            player.setBufferTimeAtTopQuality(60);
            player.setStableBufferTime(60);
            player.setBufferToKeep(60);
            player.setBufferPruningInterval(60);
            
            player.initialize(document.querySelector("#videoPlayer"), url, true);
            player.setAutoPlay(true);

            if ( abr_id == 6 ) { //BOLA
                player.enableBufferOccupancyABR(true);
            }
            player.setAbrAlgorithm(abr_id);
            player.setScreenSize(1);
            player.setClientID(Number(clientId));
    		player.setVideoFile($NAME$);

            player.play();
            if ( abr_id in abr_algorithms ) {
                document.title = abr_algorithms[abr_id];
            } else {
                document.title = "Unknown ABR Algorithm";
            }
        })();
        </script>
    </body>
</html>
<script>
    var referenceTime = (new Date()).getTime();
    var groups = {
        bitrate : {
            data : [],
            color : '#9E0000',
            yax : 1
        },
        buffer : {
            data : [],
            color : '#00B2EE',
            yax : 2
        }
    };
    var q = [{'t' : 0, 'bitrate' : 0, 'buffer' : 0}]
    var width = 1000;
    var height = 450;
    var g_left = 0;
    var g_right = 1150;
    var g_bottom = height - 100;
    var globalX = 0;
    var duration = 100;
    var max = 10;
    var step = (duration / 1000);
    var max_points = (max / step);
    var max_y1 = $MAX_Y1$;
    var step_y1 = max_y1 / 4.0;
    var max_y2 = 80;
    var step_y2 = 20;

    var chart = d3.select('#chart')
    .attr('width', g_right)
    .attr('height', height);
    var svg_y1 = d3.select('#y1axis')
    .attr('height', height);
    var svg_y2 = d3.select('#y2axis')
    .attr('height', height);
    var x = d3.scaleLinear().domain([0, width]).range([0, width]);
    var y = d3.scaleLinear().domain([0, max_y1]).range([g_bottom, 0]);
    var y2 = d3.scaleLinear().domain([0, max_y2]).range([g_bottom, 0]);
    // -----------------------------------
    var line = d3.line()
                        .x(function(d){ return x(d.x); })
                        .y(function(d){ return y(d.y); });
    var lineY2 = d3.line()                    
                        .x(function(d){ return x(d.x); })
                        .y(function(d){ return y2(d.y); });
                        
    var smoothLineY1 = d3.line().curve(d3.curveBasis)
                        .x(function(d){ return x(d.x); })
                        .y(function(d){ return y(d.y); });
    var smoothLineY2 = d3.line().curve(d3.curveBasis)
                        .x(function(d){ return x(d.x); })
                        .y(function(d){ return y2(d.y); });

    var smoothLine = {1 : line, 2 : lineY2};

    // Draw the axis
    var xAxis = d3.axisBottom().scale(x).tickSize(10);
    var axisX = chart.append('g').attr('class', 'xaxis axis')
                 .attr('transform', 'translate(' + g_left + ', ' + g_bottom + ')')
                 .call(xAxis);

    var yAxis = d3.axisLeft().scale(y).tickValues(d3.range(0,max_y1,step_y1))
                .tickSize(10);
    var axisY = svg_y1.append('g').attr('class', 'yaxis ticks axis')
                 .attr('transform', 'translate(95,0)')
                 .call(yAxis);
    var yAxisLabel = svg_y1.append('text').attr('class', 'axis yaxis')
            .attr('transform', 'translate(20,250) rotate(-90)')
            .text('Bitrate (Mbps)');
    var y2Axis = d3.axisRight().scale(y2).tickValues(d3.range(0,max_y2,step_y2))
                .tickSize(10);
    var axisY2 = svg_y2.append('g').attr('class', 'y2axis ticks axis')
                 .attr('transform', 'translate(1,0)')
                 .call(y2Axis);
    var y2AxisLabel = svg_y2.append('text').attr('class', 'axis y2axis')
            .attr('transform', 'translate(50,100) rotate(90)')
            .text('Buffer (sec)');
    // -----------------------------------
    // Draw the grid
    for (var col = 50; col < width; col+= 50) {
        chart.append('path').datum([{x: col, y: 0}, {x: col, y: g_bottom}])
                    .attr('class', 'grid')
                    .attr('d', line);
    }
    chart.append('path').datum([{x: 0, y: max_y1 / 4.0}, {x: width, y: max_y1 / 4.0}])
                        .attr('class', 'grid')
                        .attr('d', line);
    chart.append('path').datum([{x: 0, y: max_y1 / 2.0}, {x: width, y: max_y1 / 2.0}])
                        .attr('class', 'grid')
                        .attr('d', line);
    chart.append('path').datum([{x: 0, y: 3.0 * max_y1 / 4.0}, {x: width, y: 3.0 * max_y1 / 4.0}])
                        .attr('class', 'grid')
                        .attr('d', line);
    chart.append('path').datum([{x: 0, y: max_y1}, {x: width, y: max_y1}])
                        .attr('class', 'grid')
                        .attr('d', line);


    // -----------------------------------
    // Draw the axis labels
    chart.append('text')
            .attr('class', 'axis')
            .attr('transform', 'translate(' + (width / 2) + ',' + (g_bottom + 70) + ')')
            .style('text-anchor', 'middle')
            .text('Time (seconds since start)')



    // Append the holder for line chart and fill area
    var paths = chart.append('g');
    for (var name in groups) {
        var group = groups[name];
        group.path = paths.append('path')
                        .datum(group.data)
                        .attr('stroke', group.color);
    }
    //var path = chart.append('path');
    // var areaPath = chart.append('path');
    // Main loop
    var waiting = false;
    function tick() {
        // Generate new data


        if (q.length <= 0) {
            waiting = true;
            return;
        }
        waiting = false;

        var m = q.shift();
        globalX = m['t']

        for (var name in groups) {
            var group = groups[name];
            group.data.push({
                x : globalX,
                y: m[name]
            });
            group.path.attr('d', smoothLine[group.yax])
                .attr('class', 'smoothline');

        }
        //globalX += step;


        x.domain([globalX - (max - step), globalX]);
        axisX.transition()
             .duration(duration)
             .ease(d3.easeLinear,2)
             .call(xAxis);
        paths.attr('transform', null)
            .transition()
            .duration(duration)
            .ease(d3.easeLinear,2)
            .attr('transform', 'translate(' + x(globalX - max) + ')')
            .on('end', tick)
        if (groups['buffer'].data.length > max_points) {
        //if (globalX > max_points) {
            for (var name in groups) {
                groups[name].data.shift();
            }
        }
    }

    function getUpdatedParams() {
        var cur_br = player.getCurrentBitrate("video");
        var cur_buf = player.getBufferLength("video");
        var cur_t = (new Date()).getTime();
        q.push({'t': (cur_t - referenceTime) / 1000.0, 'buffer': Number(cur_buf),
            'bitrate': Number(cur_br) / 1024.0 / 1024.0});
        tick();
    }
    window.setInterval(getUpdatedParams, duration); 

</script>
